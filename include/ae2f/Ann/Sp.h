/**
 * @file Sp.h
 * @author ae2f
 * @brief 
 * @version 0.1
 * @date 2025-02-11
 * 
 * @copyright Copyright (c) 2025
 * 
 */

#ifndef ae2f_Ann_Sp_h
#define ae2f_Ann_Sp_h

#include "Act.h"
#include <ae2f/Cast.h>
#include <ae2f/Call.h>
#include <ae2f/errGlob.h>
#include <ae2f/Pack/Beg.h>
#include <ae2f/Cmp.h>

#include "Sp.h.c/cleandef.h"


typedef struct ae2f_AnnSp ae2f_AnnSp;

/// @brief 
/// Predict one output from multiple inputs.
/// @param[in] in 
/// Input vector. \n
/// Its count is @ref ae2f_AnnSp::inc.
/// @param[out] outret_opt 
/// That one predicted. \n
/// its count is 1.
/// @return  State
typedef ae2f_err_t ae2f_AnnSpPredict_t (
    const ae2f_AnnSp* _this,
    const ae2f_float_t* in,
    ae2f_float_t* outret_opt
) noexcept;

/// @brief 
/// Train for desired output: @ref goal.
/// @param[in] in 
/// Input vector. \n
/// Its count is @ref ae2f_AnnSp::inc.
/// @param[in] delta_optA 
/// Delta vector when you pre-calculated it.
/// Its count is one.
/// @param goal_optB 
/// Desired output.
/// @param learningrate 
/// Learning rate
typedef ae2f_err_t ae2f_AnnSpTrain_t (
    ae2f_AnnSp* _this,
    const ae2f_float_t* in,
    const ae2f_float_t* delta_optA,
    ae2f_float_t goal_optB,   
    ae2f_float_t learningrate
) noexcept;

/// @brief
/// Clean the class.
typedef ae2f_err_t ae2f_AnnSpClean_t (ae2f_AnnSp*) noexcept;

#undef ae2f_AnnSp

/// @brief 
/// # Single Perceptron
/// 
/// Multiple input, one output.
struct ae2f_AnnSp {
    /// @brief 
    /// True when its shape is same as expected. \n
    /// Expected structure is generated by @ref ae2f_AnnSpInit.
    int expected;

    /// @brief count of inputs to predict.
    size_t inc;

    /// @brief Delta calculation
    ae2f_AnnDelta_t* CalDelta;
    /// @brief Activasion function customisable.
    ae2f_AnnAct_t* Act;
    
    /// @brief Cleaning function
    ae2f_AnnSpClean_t* vClean;

    /// @brief Predict function
    ae2f_AnnSpPredict_t* vPredict;

    /// @brief Training function
    ae2f_AnnSpTrain_t* vTrain;

    #if ae2f_WhenCXX(1) + 0
    #include "Sp.h.cxx/Sp.hh"
    #endif
};

/// @memberof ae2f_AnnSp
/// @brief 
/// Bias Address. \n
/// Its count is @ref 1.
/// 
/// Valid when @ref ae2f_AnnSp::expected is 1. \n
/// When not, it is null.
#define ae2f_AnnSpB(_this, ...) (ae2f_CmpGetMem(_this, expected, 0) ? ae2f_reinterpret_cast(__VA_ARGS__ ae2f_float_t*, ae2f_static_cast(__VA_ARGS__ ae2f_AnnSp*, _this) + 1) : 0)

/// @memberof ae2f_AnnSp
/// @brief 
/// Actual Weights Vector. \n
/// Its count is @ref ae2f_AnnSp::inc.
/// 
/// Valid when @ref ae2f_AnnSp::expected is 1. \n
/// When not, it is null.
#define ae2f_AnnSpW(_this, ...) (ae2f_CmpGetMem(_this, expected, 0) ? (ae2f_AnnSpB(_this, __VA_ARGS__) + 1) : 0)

/// @memberof ae2f_AnnSp
/// @brief 
/// Additional allocated byte vector.
/// 
/// Valid when @ref ae2f_AnnSp::expected is 1. \n
/// When not, it is null.
/// @param prm_type The return value.
#define ae2f_AnnSpX(_this, prm_type, ...) ((_this) ? (_this)->expected ? ae2f_reinterpret_cast(__VA_ARGS__ prm_type, ae2f_AnnSpW(_this, __VA_ARGS__) + (_this)->inc) : ae2f_reinterpret_cast(__VA_ARGS__ prm_type, ae2f_static_cast(__VA_ARGS__ ae2f_AnnSp*, _this) + 1) : 0)

/// @memberof ae2f_AnnSp
/// @brief 
/// Calculates the least byte size for your design of structure. \n
/// See @ref ae2f_AnnSpInit
///
/// @param off
/// Additional allocating size for some reason. \n
/// Accessible with @ref ae2f_AnnSpX.
///
/// @param inc
/// Count of weight vector.
#define ae2f_AnnSpInitSz(off, inc) ((off + 1) + sizeof(ae2f_AnnSp) + (inc) * sizeof(ae2f_float_t))

/// @memberof ae2f_AnnSp
/// @brief 
/// Initialises a typical( @ref ae2f_AnnSp::expected ) perceptron.
/// @param[out] _this_opt 
/// @param inum
/// Input count, (aka weights count, inc)
/// @param[in] W_opt 
/// Weights 
/// @param Act 
/// Activasion function.
/// @param CalDelta 
/// Delta calculation function.
/// @param[out] erret_opt 
/// State
/// @param offset_opt
/// @return 
/// Size of param [_this] needed. \n
/// @ref 
/// ae2f_AnnSpInitSz(offset_opt, inum)
ae2f_extern ae2f_SHAREDCALL
size_t ae2f_AnnSpInit(
    ae2f_AnnSp* _this_opt,
    size_t inum,
    const ae2f_float_t* W_opt,
    ae2f_fpAnnAct_t Act,
    ae2f_fpAnnDelta_t CalDelta,
    ae2f_err_t* erret_opt,
    size_t offset_opt
) noexcept;

/// @memberof ae2f_AnnSp
/// @brief 
/// Makes a typical( @ref ae2f_AnnSp::expected ) perceptron.
/// See @ref ae2f_AnnSpInit.
/// 
/// It is heap-allocated. pass the output @ref ae2f_AnnSpDel after use.
ae2f_extern ae2f_SHAREDCALL
ae2f_AnnSp* ae2f_AnnSpMk(
    size_t inum,
    const ae2f_float_t* W_opt,
    ae2f_fpAnnAct_t Act,
    ae2f_fpAnnDelta_t CalDelta,
    ae2f_err_t* erret,
    size_t offset_opt
) noexcept;

/// @memberof ae2f_AnnSp
/// @brief
/// Clean the class.
#define ae2f_AnnSpClean(_this) \
((_this) ? (_this)->vClean ? (_this)->vClean(_this) : ae2f_errGlob_OK : ae2f_errGlob_PTR_IS_NULL)

/// @memberof ae2f_AnnSp
/// @brief 
/// Clean the class and it will try to free the pointer.
/// @param[out] _this 
/// Its memory will be freed.
/// @name ae2f_AnnSlpDel
/// @memberof ae2f_AnnSlp
/// @param[out] _this 
/// This memory will be freed.
ae2f_AnnDelDef(ae2f_AnnSp) noexcept {
    #include "Sp.h.c/clean.script.h"
}

/// @memberof ae2f_AnnSp
/// @brief 
/// Caller of @ref ae2f_AnnSpPredict_t
#define ae2f_AnnSpPredict(_this, in, out_opt) \
(ae2f_CmpGetMem(_this, vPredict, 0) ? (_this)->vPredict(_this, in, out_opt) : (ae2f_errGlob_IMP_NOT_FOUND | ae2f_errGlob_PTR_IS_NULL))

/// @memberof ae2f_AnnSp
/// @brief 
/// Caller of @ref ae2f_AnnSpTrain_t
#define ae2f_AnnSpTrain(_this, in, delta_optA, goal_optB, learningrate) \
(ae2f_CmpGetMem(_this, vTrain, 0) ? (_this)->vTrain(_this, in, delta_optA, goal_optB, learningrate) : (ae2f_errGlob_IMP_NOT_FOUND | ae2f_errGlob_PTR_IS_NULL))

/// @memberof ae2f_AnnSp
/// @brief 
/// Caller of @ref ae2f_AnnSpTrain_t \n
/// Train with Pre-calculated delta.
#define ae2f_AnnSpTrainA(_this, in, predelta, learningrate) \
ae2f_AnnSpTrain(_this, in, predelta, 0, learningrate)

/// @memberof ae2f_AnnSp
/// @brief 
/// Train for desired output: goal.
#define ae2f_AnnSpTrainB(_this, in, goal, learningrate) \
ae2f_AnnSpTrain(_this, in, 0, goal, learningrate)

#include <ae2f/Pack/End.h>

#if ae2f_WhenCXX(1) + 0
#include "Sp.h.cxx/imp.hh"
#endif

#endif